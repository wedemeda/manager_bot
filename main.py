import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

from aiogram import types
import subprocess

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ)
SERVICES = {
    "reels_bot": "reels_bot.service",
    "openvpn": "openvpn.service",
    "apache": "apache2.service"
}


async def get_short_service_status(service_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""

    result = subprocess.run(
        ["systemctl", "is-active", service_name],
        capture_output=True, text=True, timeout=3
    )
    status = result.stdout.strip()
    return "üü¢" if status == "active" else "üî¥"


async def create_services_keyboard() -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    buttons = []

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    for service_key, service_name in SERVICES.items():
        status_icon = await get_short_service_status(service_name)
        buttons.append([
            types.InlineKeyboardButton(
                text=f"{status_icon} {service_key}",
                callback_data=f"service_detail:{service_key}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    buttons.append([
        types.InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data="refresh_services"
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data == "refresh_services")
async def refresh_services_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    try:
        new_kb = await create_services_keyboard()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        current_kb = callback.message.reply_markup.inline_keyboard
        new_kb_data = new_kb.inline_keyboard

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
        has_changes = any(
            current_btn.text != new_btn.text
            for current_row, new_row in zip(current_kb, new_kb_data)
            for current_btn, new_btn in zip(current_row, new_row)
        )

        if has_changes:
            await callback.message.edit_reply_markup(reply_markup=new_kb)
            await callback.answer("–°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            await callback.answer("–°—Ç–∞—Ç—É—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")

    except TelegramBadRequest:
        await callback.answer("–°—Ç–∞—Ç—É—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
    except Exception as e:

        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


@dp.callback_query(F.data.startswith("service_detail:"))
async def service_detail_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    service_key = callback.data.split(":")[1]
    service_name = SERVICES[service_key]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        result = subprocess.run(
            ["systemctl", "status", service_name],
            capture_output=True, text=True, timeout=5
        )
        status_text = result.stdout.split('\n')[0:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
        await callback.answer(
            "\n".join(status_text),
            show_alert=True
        )
    except Exception as e:

        await callback.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", show_alert=True)


@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    kb = await create_services_keyboard()
    await message.answer(
        "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:",
        reply_markup=kb
    )


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å IP")],
        [KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")]
    ],
    resize_keyboard=True,
    selective=False
)


def aus_ip_getter():
    result = subprocess.run(["wget", "-qO-", "eth0.me"], stdout=subprocess.PIPE, text=True)
    return result.stdout.strip()


def get_service_status(service_name="reels_bot.service"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞"""

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (active/inactive)
    is_active = subprocess.run(
        ["systemctl", "is-active", service_name],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=False
    ).stdout.strip() == "active"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_result = subprocess.run(
        ["systemctl", "status", service_name],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=False
    )

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    output_lines = []
    for line in status_result.stdout.splitlines():
        line = line.strip()
        if line.startswith(('Loaded:', 'Active:')):
            output_lines.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    status_icon = "üü¢" if is_active else "üî¥"
    if output_lines:
        output_lines[0] = f"{status_icon} {output_lines[0]}"

    return '\n'.join(output_lines) if output_lines else f"{status_icon} Service status not available"


@dp.message(Command('start'))
async def start(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=main_kb)


@dp.message(F.text == '–£–∑–Ω–∞—Ç—å IP')
async def ip_sender(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'–¢–µ–∫—É—â–∏–π ip-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:: {aus_ip_getter()}')


@dp.message(F.text == '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞')
async def ip_sender(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'{get_service_status()}')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
