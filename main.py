import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

from aiogram import types
import subprocess


async def get_short_service_status(service_name="reels_bot.service") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""

    result = subprocess.run(
        ["systemctl", "is-active", service_name],
        capture_output=True,
        text=True
    )
    status = result.stdout.strip()
    return "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status == "active" else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"


async def create_status_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    status = await get_short_service_status()
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–°—Ç–∞—Ç—É—Å: {status}", callback_data="show_status")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")]
    ])


@dp.callback_query(lambda c: c.data == "refresh_status")
async def refresh_status(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_kb = await create_status_keyboard()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        current_status = callback.message.reply_markup.inline_keyboard[0][0].text
        new_status = new_kb.inline_keyboard[0][0].text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_status != new_status:
            await callback.message.edit_reply_markup(reply_markup=new_kb)
            await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            await callback.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")

    except TelegramBadRequest:
        await callback.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")


@dp.callback_query(lambda c: c.data == "show_status")
async def show_status(callback: types.CallbackQuery):
    status = await get_short_service_status()
    await callback.answer(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}", show_alert=True)


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    kb = await create_status_keyboard()
    await message.answer("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:", reply_markup=kb)


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å IP")],
        [KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")]
    ],
    resize_keyboard=True,
    selective=False
)


def aus_ip_getter():
    result = subprocess.run(["wget", "-qO-", "eth0.me"], stdout=subprocess.PIPE, text=True)
    return result.stdout.strip()


def get_service_status(service_name="reels_bot.service"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞"""

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (active/inactive)
    is_active = subprocess.run(
        ["systemctl", "is-active", service_name],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=False
    ).stdout.strip() == "active"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_result = subprocess.run(
        ["systemctl", "status", service_name],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=False
    )

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    output_lines = []
    for line in status_result.stdout.splitlines():
        line = line.strip()
        if line.startswith(('Loaded:', 'Active:')):
            output_lines.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    status_icon = "üü¢" if is_active else "üî¥"
    if output_lines:
        output_lines[0] = f"{status_icon} {output_lines[0]}"

    return '\n'.join(output_lines) if output_lines else f"{status_icon} Service status not available"


@dp.message(Command('start'))
async def start(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=main_kb)


@dp.message(F.text == '–£–∑–Ω–∞—Ç—å IP')
async def ip_sender(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'–¢–µ–∫—É—â–∏–π ip-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:: {aus_ip_getter()}')


@dp.message(F.text == '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞')
async def ip_sender(message: Message):
    if message.chat.id in ALLOWED_USERS:
        await message.answer(f'{get_service_status()}')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
